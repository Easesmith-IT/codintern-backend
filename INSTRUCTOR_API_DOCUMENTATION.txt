===============================================================================
                          INSTRUCTOR API DOCUMENTATION
                              Complete Implementation
===============================================================================

‚úÖ CREATE INSTRUCTOR API - COMPLETE IMPLEMENTATION

üìÅ FILES CREATED:
1. Service: services/instructorService.js
2. Controller: controllers/instructorController.js 
3. Routes: routes/instructorRoutes.js
4. Validation: validations/instructorValidation.js
5. Updated: index.js (registered routes)

üöÄ AVAILABLE ENDPOINTS:

Method | Endpoint                                      | Description
-------|-----------------------------------------------|---------------------------
POST   | /api/admin/instructor/create                  | Create new instructor
GET    | /api/admin/instructor/                        | Get all instructors (with filters)
GET    | /api/admin/instructor/:id                     | Get instructor details by ID
PUT    | /api/admin/instructor/:id                     | Update instructor
DELETE | /api/admin/instructor/:id                     | Delete instructor
PATCH  | /api/admin/instructor/:id/toggle-status       | Toggle active/inactive status

üîß FEATURES IMPLEMENTED:

CREATE INSTRUCTOR (POST /create)
- Form Data Support: Handles multipart form data
- Image Upload: Profile image upload to Azure
- Password Hashing: Secure bcrypt hashing (12 rounds)
- Email Validation: Prevents duplicate emails
- JSON Parsing: Handles arrays and objects from form data
- Validation: Full Joi validation

Example Request (FormData):
- firstName: "John"
- lastName: "Doe"
- email: "john.doe@example.com"
- password: "securepass123"
- phone: "+1234567890"
- bio: "Experienced AI instructor..."
- expertise: ["AI", "Machine Learning", "Python"]
- profileImage: [file]
- socialLinks: {"linkedin": "https://linkedin.com/in/johndoe"}

GET INSTRUCTORS (GET /)
- Pagination: page, limit parameters
- Filtering: 
  * isActive=true/false - Filter by active status
  * expertise=AI - Filter by expertise area
- Search: Across name, email, bio, expertise
- Sorting: sortBy, sortOrder parameters
- Security: Never returns passwords
- Population: Includes associated courses

Example Queries:
# Get active instructors
GET /api/admin/instructor?isActive=true

# Search for AI instructors
GET /api/admin/instructor?search=AI&expertise=Machine Learning

# Paginated results
GET /api/admin/instructor?page=2&limit=5

GET INSTRUCTOR DETAILS (GET /:id)
- Full Details: Complete instructor profile
- Course Population: Shows associated courses with details
- Security: Password field excluded

UPDATE INSTRUCTOR (PUT /:id)
- Partial Updates: Only provided fields are updated
- Image Upload: New profile image upload support
- Email Uniqueness: Prevents duplicate emails
- Password Rehashing: New passwords are hashed
- Validation: Joi validation for all fields

DELETE INSTRUCTOR (DELETE /:id)
- Soft Delete Option: Can be modified for soft delete if needed
- Security: Password excluded from response

TOGGLE STATUS (PATCH /:id/toggle-status)
- Quick Status Toggle: Switches between active/inactive
- No Body Required: Simple toggle operation

üìä RESPONSE FORMAT:

Success Response:
{
  "success": true,
  "message": "Instructor created successfully",
  "instructor": {
    "_id": "...",
    "firstName": "John",
    "lastName": "Doe",
    "email": "john.doe@example.com",
    "profileImage": "https://...",
    "expertise": ["AI", "Machine Learning"],
    "isActive": true,
    "createdAt": "...",
    "updatedAt": "..."
  }
}

List Response:
{
  "success": true,
  "pagination": {
    "totalPages": 3,
    "page": 1,
    "limit": 10,
    "totalInstructors": 25
  },
  "instructors": [...]
}

üõ°Ô∏è SECURITY FEATURES:
- Password Hashing: bcrypt with 12 salt rounds
- Password Exclusion: Never returns passwords in responses
- Email Uniqueness: Prevents duplicate instructor emails
- Input Validation: Comprehensive Joi validation
- File Upload Security: Integrated with your Azure upload system

üîó INTEGRATION READY:
- Course Assignment: Ready to be assigned to courses
- Authentication: Password system ready for instructor login
- File Management: Integrated with existing Azure file upload
- Error Handling: Uses your existing error handling patterns

üìã INSTRUCTOR MODEL SCHEMA:

{
  firstName: String (required, trimmed)
  lastName: String (required, trimmed)
  email: String (required, unique, lowercase)
  phone: String (optional)
  password: String (required, hashed)
  bio: String (max 2000 chars, optional)
  profileImage: String (URL, optional)
  expertise: [String] (array, optional)
  
  socialLinks: {
    linkedin: String (URL, optional)
    twitter: String (URL, optional)
    github: String (URL, optional)
    website: String (URL, optional)
  }
  
  certifications: [{
    title: String (required)
    provider: String (optional)
    year: Number (optional)
    certificateLink: String (URL, optional)
  }]
  
  courses: [ObjectId] (references Course model)
  
  ratings: {
    average: Number (default: 0)
    count: Number (default: 0)
  }
  
  achievements: [{
    title: String (required)
    description: String (optional)
    date: Date (optional)
  }]
  
  isActive: Boolean (default: true)
  createdAt: Date (auto)
  updatedAt: Date (auto)
}

üîÑ TESTING ENDPOINTS:

1. Create Instructor:
POST /api/admin/instructor/create
Content-Type: multipart/form-data
Body: FormData with instructor details + profileImage file

2. Get All Instructors:
GET /api/admin/instructor?page=1&limit=10&isActive=true

3. Get Instructor by ID:
GET /api/admin/instructor/[instructor_id]

4. Update Instructor:
PUT /api/admin/instructor/[instructor_id]
Content-Type: multipart/form-data
Body: Updated fields + optional new profileImage

5. Toggle Instructor Status:
PATCH /api/admin/instructor/[instructor_id]/toggle-status

6. Delete Instructor:
DELETE /api/admin/instructor/[instructor_id]

üí° NOTES:
- All endpoints follow the same pattern as existing job and course APIs
- Password field is automatically excluded from all responses for security
- File uploads are handled through Azure Blob Storage
- Email uniqueness is enforced at both validation and database levels
- The API is ready for immediate use and testing

===============================================================================
                           END OF DOCUMENTATION
===============================================================================
